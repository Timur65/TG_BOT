# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–¥—É–ª–µ–π
!pip install pytelegrambotapi -q
!pip install diffusers -q
!pip install deep-translator -q

!pip install -U g4f --quiet
!pip install browser-cookie3 --quiet
!pip install aiohttp_socks --quiet


#–ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
import telebot;
bot = telebot.TeleBot('7140368368:AAGPBu3w6v6ZLAZiauYsBHFve8ya2A-1AAU'); #–í–≤–æ–¥–∏–º –Ω–∞—à —Ç–æ–∫–µ–Ω(–±–æ—Ç–∞)
from telebot import types
from deep_translator import GoogleTranslator

# –ù–∞—à –º–æ–∑–≥ - –∏–ª–∏ –∂–µ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ—â—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT4

import g4f
from g4f.Provider import (
    GeekGpt,
    Liaobots,
    Phind,
    Raycast,
    RetryProvider)
from g4f.client import Client
import nest_asyncio
nest_asyncio.apply()

client = Client(
    provider = RetryProvider([
            g4f.Provider.Liaobots,
            g4f.Provider.GeekGpt,
            g4f.Provider.Phind,
            g4f.Provider.Raycast
    ])
  )
chat_history = [{"role": "user", "content": '–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'}]


def send_request(message):
    global chat_history
    chat_history[0]["content"] += message + " "

    try:
        response = g4f.ChatCompletion.create(
        model=g4f.models.gpt_4,
        messages=chat_history
    )
    except Exception as err:
        print("–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–∑–∂–µ")
    print(chat_history)
    chat_history[0]["content"] += response + " "
    return response


from diffusers import DiffusionPipeline
import torch

# –ö–∏—Å—Ç–æ—á–∫–∞
def send_photo(message):
    base = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0", torch_dtype=torch.float16, variant="fp16", use_safetensors=True)

    base.to("cuda")
    refiner = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-refiner-1.0",
        text_encoder_2=base.text_encoder_2,
        vae=base.vae,
        torch_dtype=torch.float16,
        use_safetensors=True,
        variant="fp16", )
    refiner.to("cuda")


    n_steps = 40
    high_noise_frac = 0.8

    prompt = message

    image = base(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_end=high_noise_frac,
        output_type="latent", ).images
    image = refiner(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_start=high_noise_frac,
        image=image, ).images[0]
    return image


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –º–µ–Ω—è! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',reply_markup=markup)
    
@bot.message_handler(content_types=['text'])
def func(message):
    if(message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π!)")
    elif(message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
        btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)
    
    elif(message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
        bot.send_message(message.chat.id, "Historical Events Bot")
    
    elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
        bot.send_message(message.chat.id, text="–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ª—é–±–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–∏, –∞ —Ç–∞–∫–∂–µ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ")
    
    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        inp = GoogleTranslator(source='auto', target='en').translate(message.text)
        inp1 = "Tell us in detail about " + inp
        out = GoogleTranslator(source='auto', target='ru').translate(send_request(inp1))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        bot.send_message(message.chat.id, out)
        # –ü–µ—Ä–≤–∞—è –∫–∏—Å—Ç–æ—á–∫–∞ - –ø–æ—Å–ª–æ–∂–Ω–µ–µ
        bot.send_photo(message.chat.id, send_photo(inp))
        
        
bot.polling(none_stop=True, interval=0)
